# lookup existing secret
{{- $secretName :=  include "argo-cd.redis.fullname" . -}}
{{- $secretObj := (lookup "v1" "Secret" .Release.Namespace $secretName) | default dict }}
{{- $secretData := (get $secretObj "data") | default dict }}
# generate random password if secret doesn't exist
{{- $defaultUserPassword := (get $secretData "redis-password-default") | default (randAlphaNum 48 | b64enc) }}
{{- $adminUserPassword := (get $secretData "redis-password-admin") | default (randAlphaNum 48 | b64enc) }}
{{- $argoUserPassword := (get $secretData "redis-password") | default (randAlphaNum 48 | b64enc) }}
{{- if .Values.redis.auth.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "argo-cd.labels" (dict "context" . "component" .Values.redis.name "name" .Values.redis.name) | nindent 4 }}
  {{- with .Values.redis.auth.secretAnnotations }}
  annotations:
    {{- range $key, $value := . }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  {{- end }}
type: Opaque
immutable: true
data:
  redis-username-default: {{ "default" | b64enc }}
  redis-password-default: {{ $defaultUserPassword | quote }}

  redis-username-admin: {{ "admin" | b64enc }}
  redis-password-admin: {{ $adminUserPassword | quote }}

  {{- with .Values.redis.auth.username }}
  redis-username: {{ . | b64enc }}
  {{- end }}
  redis-password: {{ $argoUserPassword | quote }}
{{- end }}

{{- $redisHa := index .Values "redis-ha" -}}
{{- if and .Values.redis.enabled .Values.redis.auth.enabled (not $redisHa.enabled) }}
---
apiVersion: v1
kind: Secret
metadata:
  name: "{{ include "argo-cd.redis.fullname" . }}-users"
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "argo-cd.labels" (dict "context" . "component" .Values.redis.name "name" .Values.redis.name) | nindent 4 }}
  {{- with .Values.redis.auth.secretAnnotations }}
  annotations:
    {{- range $key, $value := . }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  {{- end }}
stringData:
  users.acl: |
    user default on +@all -@admin -@dangerous ~* &* >{{ $defaultUserPassword | b64dec }}
    user admin on +@all -@admin -@dangerous ~* &* >{{ $adminUserPassword | b64dec }}
    user {{ .Values.redis.auth.username }} on +@all ~* &* >{{ $argoUserPassword | b64dec }}

{{- end }}
